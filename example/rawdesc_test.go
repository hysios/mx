package main

import (
	"context"
	"reflect"
	"testing"

	"github.com/tj/assert"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/runtime/protoimpl"
	"google.golang.org/protobuf/types/dynamicpb"
)

var fileraw = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x61, 0x79, 0x22, 0x29, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x75, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x65, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x92, 0x41, 0x1c, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x42, 0x77, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x73, 0x69, 0x6f, 0x73, 0x2f, 0x6d, 0x78, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x92, 0x41, 0x50,
	0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x72, 0x43, 0x0a, 0x15, 0x6d,
	0x78, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x70, 0x69, 0x20,
	0x64, 0x65, 0x6d, 0x6f, 0x12, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x73, 0x69, 0x6f, 0x73, 0x2f,
	0x6d, 0x78, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

func TestRaw(t *testing.T) {
	type x struct{}
	build := protoimpl.DescBuilder{
		GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
		RawDescriptor: fileraw,
		// NumEnums:      0,
		// NumMessages:   2,
		// NumExtensions: 0,
		// NumServices:   1,
		TypeResolver: &protoregistry.Types{},
		FileRegistry: &protoregistry.Files{},
	}

	out := build.Build()
	assert.NotNil(t, out)
	t.Logf("out % #v", out)
}

func buildProtoDesc() protoreflect.FileDescriptor {
	type x struct{}
	build := protoimpl.DescBuilder{
		GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
		RawDescriptor: fileraw,
		// NumEnums:      0,
		// NumMessages:   2,
		// NumExtensions: 0,
		// NumServices:   1,
		TypeResolver: &protoregistry.Types{},
		FileRegistry: &protoregistry.Files{},
	}
	out := build.Build()

	return out.File
}

func TestDynamicCall(t *testing.T) {
	conn, err := grpc.Dial("localhost:9080", grpc.WithInsecure())
	assert.NoError(t, err)
	assert.NotNil(t, conn)
	var (
		ctx  = context.Background()
		file = buildProtoDesc()
	)

	reqDescript := file.Messages().ByName("HelloRequest")
	assert.NotNil(t, reqDescript)

	respDescript := file.Messages().ByName("HelloResponse")
	assert.NotNil(t, respDescript)

	in := dynamicpb.NewMessage(protoreflect.MessageDescriptor(reqDescript))
	out := dynamicpb.NewMessage(protoreflect.MessageDescriptor(respDescript))

	err = conn.Invoke(ctx, "/hello.HelloService/Hello", in, out)
	assert.NoError(t, err)
}
